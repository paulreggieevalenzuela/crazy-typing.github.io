{"version":3,"sources":["hooks/useKeyPress.js","components/TextField.js","components/TextAreaField.js","components/ButtonField.js","components/Timer.js","App.js","serviceWorker.js","index.js"],"names":["useKeyPress","callback","useState","keyPressed","setKeyPressed","useEffect","downHandler","key","length","upHandler","window","addEventListener","removeEventListener","TextField","outgoingChars","currentChar","incomingChars","className","TextAreaField","React","forwardRef","props","ref","autoFocus","type","rows","ButtonField","text","onClick","Timer","state","msElapsed","displayTime","timerId","timerIsOn","startTimer","setInterval","Number","parseFloat","toFixed","setState","stopAndResetTimer","clearInterval","stopTimer","prevProps","textEntered","this","finished","getFinalTime","Component","currentTime","Date","getTime","App","textElement","useRef","initialWords","setInitialWords","setOutgoingChars","setCurrentChar","setIncomingChars","startTime","setStartTime","wordCount","setWordCount","wpm","setWpm","accuracy","setAccuracy","typedChars","setTypedChars","textarea","setTextAreaValue","finalTime","setFinalTime","isCorrect","setIsCorrect","isFinished","setFinished","reset","setReset","_handleReset","current","focus","_request","axios","get","then","res","data","replace","charAt","substr","catch","err","console","warn","updatedOutgoingChars","updatedIncomingChars","substring","durationInMinutes","updatedTypedChars","completedValue","value","placeholder","disabled","onChange","e","target","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.5673158d.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useKeyPress = callback => {\n  const [keyPressed, setKeyPressed] = useState();\n  \n  useEffect(() => {\n    const downHandler = ({ key }) => {\n      if (keyPressed !== key && key.length === 1) {\n        setKeyPressed(key);\n        callback && callback(key);\n      }\n    };\n    const upHandler = () => {\n      setKeyPressed(null);\n    };\n\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n  });\n\n  return keyPressed;\n};\n\nexport default useKeyPress;","import React from 'react';\n\nconst TextField = ({ outgoingChars, currentChar, incomingChars }) => (\n    <div className=\"field field__button\">\n        <p className=\"character\">\n            <span className=\"character-out\">\n                {outgoingChars}\n            </span>\n            <span className=\"character-current\">{currentChar}</span>\n            <span>{incomingChars}</span>\n        </p>\n    </div>\n);\n\nexport default TextField;","import React from 'react';\n\nconst TextAreaField = React.forwardRef((props, ref) => (\n    <div className=\"field\">\n        <div className=\"control\">\n            <textarea \n                ref={ref}\n                {...props}\n                autoFocus={true}\n                type=\"textarea\"\n                rows=\"5\"\n            />\n        </div>\n    </div>\n));\n\nexport default TextAreaField;","import React from 'react';\n\nconst ButtonField = ({ text, onClick }) => (\n    <div className=\"field field__button\">\n        <div className=\"control\">\n            <button className=\"button\" onClick={onClick}>\n                {text}\n            </button>\n        </div>\n    </div>\n);\n\nexport default ButtonField;","import React, { Component } from 'react';\n\nclass Timer extends Component {\n  state = {\n    msElapsed: 0,\n    displayTime: \"0.0\",\n    timerId: null,\n    timerIsOn: false\n  }\n\n  componentDidUpdate (prevProps) {\n    if (prevProps.textEntered !== this.props.textEntered) {\n      if (this.props.textEntered) {\n        this.startTimer();\n      } else {\n        this.stopAndResetTimer();\n      }\n    }\n    if (prevProps.finished !== this.props.finished) {\n      this.stopTimer();\n      this.props.getFinalTime(this.state.msElapsed);\n    }\n  }\n\n  startTimer = () => {\n    let msElapsed = this.state.msElapsed;\n    const timerId = setInterval(() => {\n      msElapsed += 0.1;\n      const displayTime = Number.parseFloat(msElapsed).toFixed(1)\n      this.setState({msElapsed, displayTime, timerId, timerIsOn: true});\n    }, 100);\n\n  }  \n\n  stopAndResetTimer = () => {\n    clearInterval(this.state.timerId);\n    const state = {\n      msElapsed: 0,\n      displayTime: \"0.0\",\n      timerId: null,\n      timerIsOn: false\n    }\n    this.setState({...state});\n  }\n\n  stopTimer = () => {\n    clearInterval(this.state.timerId);\n    const state = {\n      msElapsed: 0,\n      displayTime: \"0.0\",\n      timerId: null,\n      timerIsOn: false\n    }\n    this.setState({...state})\n  }\n\n  render() {\n    return (\n      <div className={`timer-display ${this.state.timerIsOn ? '--active' : ''} `}>\n        <span className={`${this.state.timerIsOn ? 'pulse' : ''} `}>\n          {this.props.finished ? this.state.msElapsed : this.state.displayTime} seconds\n        </span>\n      </div>\n    )\n  }\n}\n\nexport default Timer;","import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\n\n// Hooks\nimport useKeyPress from './hooks/useKeyPress';\n\n// Components\nimport TextField from './components/TextField';\nimport TextAreaField from './components/TextAreaField';\nimport ButtonField from './components/ButtonField';\nimport Timer from './components/Timer';\n\nimport './app.scss';\n\nconst currentTime = () => new Date().getTime();\n\nconst App = () => {\n    const textElement = useRef(null);\n    const [initialWords, setInitialWords] = useState('');\n    const [outgoingChars, setOutgoingChars] = useState('');\n    const [currentChar, setCurrentChar] = useState('');\n    const [incomingChars, setIncomingChars] = useState('');\n\n    const [startTime, setStartTime] = useState(0);\n    const [wordCount, setWordCount] = useState(0);\n    const [wpm, setWpm] = useState(0);\n\n    const [accuracy, setAccuracy] = useState(0);\n    const [typedChars, setTypedChars] = useState('');\n    const [textarea, setTextAreaValue] = useState('');\n\n    const [finalTime, setFinalTime] = useState(0);\n\n    const [isCorrect, setIsCorrect] = useState(true);\n    const [isFinished, setFinished] = useState(false);\n\n    const [reset, setReset] = useState(false);\n\n    const _handleReset = () => {\n        setInitialWords('');\n        setOutgoingChars('');\n        setIncomingChars('');\n        setCurrentChar('');\n        setTypedChars('');\n        setTextAreaValue('');\n\n        setStartTime(0);\n        setFinalTime(0);\n\n        setWordCount(0);\n        setWpm(0);\n        setAccuracy(0);\n\n        setIsCorrect(true);\n        setFinished(false);\n        setReset(true);\n    };\n\n    useEffect(() => {\n      if (textElement.current) {\n        textElement.current.focus();\n      }\n    }, [typedChars]);\n\n    const _request = () => {\n        axios.get(`https://baconipsum.com/api/?type=meat-and-filler&paras=1&format=text`)\n        .then(res => {\n            setInitialWords(res.data.replace(/\\s\\s/g, ' '));\n            setCurrentChar(res.data.replace(/\\s\\s/g, ' ').charAt(0));\n            setIncomingChars(res.data.replace(/\\s\\s/g, ' ').substr(1));\n        })\n        .catch(err => {\n            console.warn(err)\n        })\n    }\n\n    useEffect(() => {\n        _request();\n    }, []);\n\n    const _getFinalTime = (finalTime) => {\n        setFinalTime(finalTime);\n    }\n\n    useKeyPress(key => {\n        let updatedOutgoingChars = outgoingChars;\n        let updatedIncomingChars = incomingChars;\n\n        if (!startTime) {\n            setStartTime(currentTime());\n            setReset(false);\n        }\n        \n        if (key === currentChar) {\n            updatedOutgoingChars += currentChar;\n            setOutgoingChars(updatedOutgoingChars);\n            setCurrentChar(incomingChars.charAt(0));\n            updatedIncomingChars = incomingChars.substring(1);\n            setIncomingChars(updatedIncomingChars);\n            setIsCorrect(true);\n            if (incomingChars.charAt(0) === ' ') {\n                setWordCount(wordCount + 1);\n                const durationInMinutes = (currentTime() - startTime) / 60000.0;\n                setWpm(((wordCount + 1) / durationInMinutes).toFixed(2));\n            }\n        } else {\n            setIsCorrect(false);\n        }\n\n        const updatedTypedChars = typedChars + key;\n        const completedValue = textElement.current.value + key;\n\n        if (completedValue === initialWords) {\n            setFinished(completedValue === initialWords);\n        }\n        setTypedChars(updatedTypedChars);\n        setAccuracy(((updatedOutgoingChars.length * 100) / updatedTypedChars.length).toFixed(2));\n    });\n    \n    return (\n        <div className=\"app\">\n            <h1 className=\"container is-size-1 title\">Crazy Typing!!!</h1>\n            <div className=\"container\">\n                <div className=\"box\">\n                    <div className=\"flex\">\n                        <ButtonField \n                            text='Get Different Text' \n                            onClick={() => {\n                                _handleReset();\n                                _request();\n                            }}\n                        />\n                    </div>\n                    <TextField \n                        incomingChars={incomingChars} \n                        currentChar={currentChar} \n                        outgoingChars={outgoingChars} \n                    />\n                </div>  \n            </div>\n            <div className=\"inputDisplay container\">\n                <div className=\"box\">\n                    <ButtonField \n                        text='Reset' \n                        onClick={() => {\n                            _handleReset();\n                            _request();\n                        }}\n                    />\n                    <TextAreaField \n                        ref={textElement}\n                        placeholder=\"Clock starts when you type\"\n                        className={`textarea ${isCorrect ? 'is-primary' : 'is-danger' }`}\n                        disabled={isFinished}\n                        onChange={(e) => setTextAreaValue(e.target.value)}\n                        value={textarea}\n                    />\n                </div>\n            </div>\n            <div className=\"container\">\n                <div className=\"columns\">\n                    <div className=\"column is-6\">\n                        <div className=\"result box\">\n                            <span className={`result-display is-size-2 ${wpm ? \"boing\" : \"\"}`}>\n                                WPM: {wpm} | ACC: {accuracy}%\n                            </span>\n                        </div>\n                        \n                    </div>\n                    <div className=\"column is-6\">\n                        <div className=\"result box timer-display is-size-2\">\n                            {reset ? `${finalTime} seconds` :\n                                <Timer \n                                    textEntered={textarea} \n                                    finished={isFinished}\n                                    getFinalTime={_getFinalTime}\n                                />\n                            }\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}